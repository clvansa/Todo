{"version":3,"sources":["components/TodoItem/TodoItem.js","components/Header.js","components/TodoInput.js","components/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["styles","title","display","minWidth","textAlign","completedStyle","fontStyle","color","opacity","textDecoration","TodoItem","props","className","type","checked","completed","onChange","handleChange","id","style","onClick","handleDelete","Header","padding","TodoInput","state","error","onChangeHandler","e","setState","target","name","value","length","handleSubmit","preventDefault","addTodo","this","onSubmit","placeholder","minLength","Component","TodoContainer","todos","onChangeCheckBox","updateTodo","map","todo","onDelete","deleteTodo","filter","handleAddTodo","addNewTodo","axios","get","params","_limit","then","response","data","catch","err","console","log","key","React","App","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.21554392.chunk.js","sourcesContent":["import React from \"react\";\n// import styles from './TodoItem.module.scss'\n\nconst styles = {\n\n    title: {\n        display: \"inline-block\",\n        minWidth: 500,\n        textAlign:\"left\" \n    },\n     completedStyle : {\n        fontStyle: \"italic\",\n        color: \"#d35e0f\",\n        opacity: 0.4,\n        textDecoration: \"line-through\",\n        display: \"inline-block\",\n      }\n}\nconst TodoItem = (props) => {\n  \n    return <li className='todo-item '>\n        <input\n            type=\"checkbox\"\n            checked={props.completed}\n            onChange={() => props.handleChange(props.id)}\n            style={styles.completedStyle}\n            className='input' />\n        <p style={props.completed ? styles.completedStyle : styles.title}>\n            {props.title}\n        </p>\n        <button\n            onClick={() => props.handleDelete(props.id)}\n            className='button'>\n            Del\n        </button>\n    </li>\n}\n\nexport default TodoItem","import React from 'react';\n\nconst Header = () => {\n    return (\n        <div >\n            <h1 style={{padding:'30px 0', textAlign:'center'}}>To Do App</h1>\n            <p style={{padding:'20px 0'}}>Add, Edit or Delete a Todo Item.</p>\n        </div>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react'\n\nexport class TodoInput extends Component {\n    state = {\n        title: \"\",\n        error: null\n    }\n    onChangeHandler = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n        if(e.target.value.length < 3 || e.target.value.length > 25 ){\n            return 'red'\n        }else {\n            return 'green'\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.title === '') {\n            return this.setState({ error: \"must not to be empty\" })\n        } else {\n            this.setState({ error: null })\n            this.props.addTodo(this.state.title)\n            this.setState({ title: \"\" })\n        }\n    }\n\n    render() {\n        let error = this.state.error && <p style={{ color: \"red\" }}>{this.state.error}</p>\n        return (\n            <>\n                {error}\n                <form\n                    onSubmit={this.handleSubmit}\n                    className='form'>\n                    <input\n                        type=\"text\"\n                        name=\"title\"\n                        placeholder=\"Add todo\"\n                        onChange={this.onChangeHandler}\n                        value={this.state.title}\n                        className='input-text'\n                        minLength= '3'\n                        // maxLength= '25'\n                        style={this.state.title.length < 3 || this.state.title.length > 25 ? {color:'red'}:{color:'green'}} />\n                    <button\n                        type=\"submit\"\n                        className='input-submit'>\n                        hinzuf√ºgen\n                </button>\n                </form>\n            </>\n        )\n    }\n}\n\nexport default TodoInput\n\n","import React from 'react';\nimport TodoItem from \"./TodoItem/TodoItem\";\nimport Header from \"./Header\";\nimport TodoInput from './TodoInput';\nimport '../App.scss';\nimport axios  from 'axios'\n\n// class component\nclass TodoContainer extends React.Component {\n\n    state = {\n        todos: []\n    }\n\n\n   componentWillMount  () {\n        axios.get('https://jsonplaceholder.typicode.com/todos',{\n            params: {_limit : 15}\n        })\n        .then(\n            response => {\n                  this.setState({todos: response.data}) \n        }).catch(err => {\n            console.log(err)\n        });\n   }\n    onChangeCheckBox = (id) => {\n        const updateTodo = this.state.todos.map( todo => {\n            if(todo.id === id){\n                todo.completed = !todo.completed\n            }\n            return todo\n        })\n         this.setState({\n            todos: updateTodo\n        })\n    }\n\n    onDelete = (id) => {\n        const deleteTodo = this.state.todos.filter(todo =>  todo.id !== id )\n        this.setState({\n            todos: deleteTodo\n        })\n        \n    }\n\n    handleAddTodo = (todo) => {\n        let id = this.state.todos.length +1 \n            let addNewTodo ={\n                id:id,\n                title: todo,\n                completed: false\n            }\n        this.setState({\n            todos:[...this.state.todos,addNewTodo]\n        })\n\n    }\n  \n\n    render() {\n\n        return (\n            <div className=\"container\">\n          \n                <Header />\n                <TodoInput addTodo = {this.handleAddTodo}/>\n                <ul style={{padding:40}}>\n                    {\n                        this.state.todos.map(todo => (\n                            <TodoItem \n                                key={todo.id} \n                                title={todo.title} \n                                id={todo.id} \n                                completed={todo.completed} \n                                handleChange={this.onChangeCheckBox}\n                                handleDelete={this.onDelete} />\n                                \n                        ))\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\n// functional component\nconst TodoContainerFunction = (props) => {\n\n    return (\n        <div>\n            <h1>Hi, ich bin der TodoContainer!</h1>\n            <p>{props.text}</p>\n        </div>);\n};\n\n\n\nexport default TodoContainer;","import React from 'react';\nimport TodoContainer from './components/TodoContainer';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoContainer text=\"Mein Text kommt als property\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}