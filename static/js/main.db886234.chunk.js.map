{"version":3,"sources":["components/TodoItem/TodoitemClass.js","components/Header.js","components/TodoInputFunc.js","components/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["styles","title","display","minWidth","textAlign","completedStyle","fontStyle","color","opacity","textDecoration","TodoitemClass","className","type","checked","this","props","completed","onChange","handleChange","id","style","onClick","handleDelete","Component","Header","h1","margin","timeGetBusy","marginBottom","padding","TodoInputFunc","useState","setTitle","error","setError","onSubmit","e","preventDefault","includes","addTodo","name","placeholder","target","value","minLength","outline","length","disabled","backgroundColor","TodoContainer","state","todos","isLoading","onChangeCheckBox","axios","put","updateTodo","map","todo","_id","setState","onDelete","delete","then","deleteTodo","filter","catch","err","console","log","handleAddTodo","post","res","data","get","response","completd","fontSize","key","React","App","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mQAEMA,EAAS,CAEXC,MAAO,CACHC,QAAS,eACTC,SAAU,IACVC,UAAU,QAEbC,eAAiB,CACdC,UAAW,SACXC,MAAO,UACPC,QAAS,GACTC,eAAgB,eAChBP,QAAS,iBA2BFQ,EAvBf,uKACc,IAAD,OACL,OACI,wBAAIC,UAAU,cACV,2BACIC,KAAK,WACLC,QAASC,KAAKC,MAAMC,UACpBC,SAAU,kBAAM,EAAKF,MAAMG,aAAa,EAAKH,MAAMI,KACnDC,MAAOpB,EAAOK,eACdM,UAAU,UACd,uBAAGS,MAAON,KAAKC,MAAMC,UAAYhB,EAAOK,eAAiBL,EAAOC,OAC3Da,KAAKC,MAAMd,OAEhB,4BACIoB,QAAS,kBAAM,EAAKN,MAAMO,aAAa,EAAKP,MAAMI,KAClDR,UAAU,UAFd,YAbhB,GAAmCY,a,QCKpBC,EArBA,SAACT,GACZ,IAAMf,EAAS,CACXyB,GAAI,CACArB,UAAW,SACXG,MAAO,OACPmB,OAAQX,EAAMY,YAAc,EAAG,KAGvC,OACI,6BACI,wBAAIP,MAAOpB,EAAOyB,IAAlB,aACCV,EAAMY,aACH,wBAAIP,MAAK,2BAAOpB,EAAOyB,IAAd,IAAkBG,aAAc,UAAzC,qBAIJ,uBAAGR,MAAO,CAAES,QAAS,WAArB,sC,OCmCGC,MAnDf,SAAuBf,GAAQ,IAAD,EACAgB,mBAAS,IADT,mBACnB9B,EADmB,KACZ+B,EADY,OAEAD,mBAAS,MAFT,mBAEnBE,EAFmB,KAEZC,EAFY,KAoB1B,OACI,6BACKD,GAAS,uBAAGb,MAAO,CAAEb,MAAO,MAAOsB,QAAQ,WAAYI,GACxD,0BACIE,SAhBS,SAACC,GAElB,OADAA,EAAEC,iBACY,KAAVpC,EACOiC,EAAS,wBACTjC,EAAMqC,SAAS,KACfJ,EAAS,qCAEhBA,EAAS,MACTnB,EAAMwB,QAAQtC,QACd+B,EAAS,MAQLrB,UAAU,QACV,2BACIC,KAAK,OACL4B,KAAK,QACLC,YAAY,sDACZxB,SA1BQ,SAACmB,GACrBJ,EAASI,EAAEM,OAAOC,QA0BNA,MAAO1C,EACPU,UAAU,aACViC,UAAU,IACVxB,MAAO,CACHyB,QAAUZ,GAAS,gBACnB1B,MAAMN,EAAM6C,OAAS,GAAK7C,EAAM6C,OAAS,GAAK,MAAQ,SAE1DC,SAAUhC,EAAMY,cACpB,4BACIf,KAAK,SACLD,UAAU,eACVoC,SAAUhC,EAAMY,YAChBP,MAAOL,EAAMY,YAAc,CAAEqB,gBAAiB,QAAW,MAJ7D,oB,wBCwEDC,E,4MApGXC,MAAQ,CACJC,MAAO,GACPC,WAAW,EACXzB,aAAa,G,EAyBjB0B,iBAAmB,SAAClC,GAChBmC,IAAMC,IAAN,qCAAwCpC,IACxC,IAAMqC,EAAa,EAAKN,MAAMC,MAAMM,KAAI,SAAAC,GAIpC,OAHIA,EAAKC,MAAQxC,IACbuC,EAAK1C,WAAa0C,EAAK1C,WAEpB0C,KAEX,EAAKE,SAAS,CACVT,MAAOK,K,EAIfK,SAAW,SAAC1C,GACRmC,IAAMQ,OAAN,qCAA2C3C,IACtC4C,MAAK,WACF,IAAMC,EAAa,EAAKd,MAAMC,MAAMc,QAAO,SAAAP,GAAI,OAAIA,EAAKC,MAAQxC,KAChE,EAAKyC,SAAS,CACVT,MAAOa,OAEZE,OAAM,SAAAC,GACLC,QAAQC,IAAIF,O,EAIxBG,cAAgB,SAACZ,GACb,EAAKE,SAAS,CAAER,WAAW,IAC3B,IAAInD,EAAQyD,EACZJ,IAAMiB,KAAK,6BAA8B,CAAEtE,UACtC8D,MAAK,SAAAS,GACF,EAAKZ,SAAS,CACVT,MAAM,GAAD,mBAAM,EAAKD,MAAMC,OAAjB,CAAwBqB,EAAIC,OACjCrB,WAAW,OAEhBc,OAAM,SAAAC,GACLC,QAAQC,IAAIF,O,kEAzDH,IAAD,OAChBrD,KAAK8C,SAAS,CAAER,WAAW,IAC3BE,IAAMoB,IAAI,8BACLX,MACG,SAAAY,GACI,EAAKf,SAAS,CACVT,MAAOwB,EAASF,KAChBrB,WAAW,OAEhBc,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,2CAKpBrD,KAAKoC,MAAMC,MAAML,QAAU,KAAiC,IAA3BhC,KAAKoC,MAAMvB,YAC5Cb,KAAK8C,SAAS,CAAEjC,aAAa,IACtBb,KAAKoC,MAAMC,MAAML,OAAS,KAAiC,IAA3BhC,KAAKoC,MAAMvB,aAClDb,KAAK8C,SAAS,CAAEjC,aAAa,M,+BA4C3B,IAAD,OACDiD,EAAW9D,KAAKoC,MAAMC,MAAMc,QAAO,SAACP,GAAD,OAAUA,EAAK1C,aACtD,OACI,yBAAKL,UAAU,YAAYS,MAAON,KAAKoC,MAAME,UAAY,CAAE5C,QAAS,OAAU,MAE1E,kBAAC,EAAD,CAAQmB,YAAab,KAAKoC,MAAMvB,cAChC,kBAAC,EAAD,CAAWY,QAASzB,KAAKwD,cAAe3C,YAAab,KAAKoC,MAAMvB,cAC/Db,KAAKoC,MAAME,UAAY,2CAAsB,KAC9C,0BAAMhC,MAAO,CAAEb,MAAO,QAASsE,SAAU,KAAzC,kBAA+DD,EAAS9B,QACxE,wBAAI1B,MAAO,CAAES,QAAS,KAEdf,KAAKoC,MAAMC,MAAMM,KAAI,SAAAC,GAAI,OACrB,kBAAC,EAAD,CACIoB,IAAKpB,EAAKC,IACV1D,MAAOyD,EAAKzD,MACZkB,GAAIuC,EAAKC,IACT3C,UAAW0C,EAAK1C,UAChBE,aAAc,EAAKmC,iBACnB/B,aAAc,EAAKuC,oB,GAxFvBkB,IAAMxD,WCCnByD,MARf,WACE,OACE,yBAAKrE,UAAU,OACb,kBAAC,EAAD,CAAesE,KAAK,mCCKNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAjC,GACLmC,QAAQnC,MAAMA,EAAMgE,c","file":"static/js/main.db886234.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst styles = {\n\n    title: {\n        display: \"inline-block\",\n        minWidth: 500,\n        textAlign:\"left\" \n    },\n     completedStyle : {\n        fontStyle: \"italic\",\n        color: \"#d35e0f\",\n        opacity: 0.4,\n        textDecoration: \"line-through\",\n        display: \"inline-block\",\n      }\n}\n\nexport class TodoitemClass extends Component {\n    render() {\n        return (\n            <li className='todo-item '>\n                <input\n                    type=\"checkbox\"\n                    checked={this.props.completed}\n                    onChange={() => this.props.handleChange(this.props.id)}\n                    style={styles.completedStyle}\n                    className='input' />\n                <p style={this.props.completed ? styles.completedStyle : styles.title}>\n                    {this.props.title}\n                </p>\n                <button\n                    onClick={() => this.props.handleDelete(this.props.id)}\n                    className='button'>\n                    Del\n                </button>\n            </li>\n        )\n    }\n}\n\nexport default TodoitemClass\n","import React from 'react';\n\nconst Header = (props) => {\n    const styles = {\n        h1: {\n            textAlign: \"center\",\n            color: \"gray\",\n            margin: props.timeGetBusy ? 0: 20\n        }\n    }\n    return (\n        <div >\n            <h1 style={styles.h1 }>To Do App</h1>\n            {props.timeGetBusy &&\n                <h2 style={{ ...styles.h1, marginBottom: '30px' }}>\n                    Time to get busy!\n            </h2>\n            }\n            <p style={{ padding: '20px 0' }}>Add, Edit or Delete a Todo Item.</p>\n        </div>\n    )\n}\n\nexport default Header;","import React, { useState } from 'react'\n\nfunction TodoInputFunc(props) {\n    const [title, setTitle] = useState('');\n    const [error, setError] = useState(null);\n\n    const onChangeHandler = (e) => {\n        setTitle(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (title === '') {\n            return setError(\"must not to be empty\" );\n        } else if (title.includes('@')) {\n            return setError(\"Please don't use @ in your Todos\" );\n        }else {\n            setError(null)\n            props.addTodo(title)\n            setTitle(\"\")\n        }\n    }\n    return (\n        <div>\n            {error && <p style={{ color: \"red\" ,padding:\"20px 0\"}}>{error}</p>}\n            <form\n                onSubmit={handleSubmit}\n                className='form'>\n                <input\n                    type=\"text\"\n                    name=\"title\"\n                    placeholder=\"Dein ToDo muss zwischen 3 und 25 Zeichen lang sein!\"\n                    onChange={onChangeHandler}\n                    value={title}\n                    className='input-text'\n                    minLength='3'\n                    style={{\n                        outline : error && '1px solid red',\n                        color:title.length < 3 || title.length > 25 ? 'red' : 'green'}}\n                   \n                    disabled={props.timeGetBusy} />\n                <button\n                    type=\"submit\"\n                    className='input-submit'\n                    disabled={props.timeGetBusy}\n                    style={props.timeGetBusy ? { backgroundColor: '#eee' } : null}>\n                    hinzuf√ºgen\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default TodoInputFunc\n","import React from 'react';\n// import TodoItem from \"./TodoItem/TodoItem\";\nimport TodoItem from './TodoItem/TodoitemClass'\nimport Header from \"./Header\";\n// import TodoInput from './TodoInput';\nimport TodoInput from './TodoInputFunc'\nimport '../App.scss';\nimport axios from 'axios'\n\n\n// class component\nclass TodoContainer extends React.Component {\n\n    state = {\n        todos: [],\n        isLoading: false,\n        timeGetBusy: false,\n    }\n\n    componentDidMount() {\n        this.setState({ isLoading: true })\n        axios.get('http://localhost:5000/todo')\n            .then(\n                response => {\n                    this.setState({\n                        todos: response.data,\n                        isLoading: false\n                    })\n                }).catch(err => {\n                    console.log(err)\n                });\n    }\n\n    componentDidUpdate() {\n        if (this.state.todos.length >= 10 && this.state.timeGetBusy === false) {\n            this.setState({ timeGetBusy: true })\n        } else if (this.state.todos.length < 10 && this.state.timeGetBusy === true) {\n            this.setState({ timeGetBusy: false })\n        }\n    }\n\n    onChangeCheckBox = (id) => {\n        axios.put(`http://localhost:5000/todo/${id}`)\n        const updateTodo = this.state.todos.map(todo => {\n            if (todo._id === id) {\n                todo.completed = !todo.completed\n            }\n            return todo\n        })\n        this.setState({\n            todos: updateTodo\n        })\n    }\n\n    onDelete = (id) => {\n        axios.delete(`http://localhost:5000/todo/${id}`)\n            .then(() => {\n                const deleteTodo = this.state.todos.filter(todo => todo._id !== id)\n                this.setState({\n                    todos: deleteTodo\n                })\n            }).catch(err => {\n                console.log(err);\n            });\n    }\n\n    handleAddTodo = (todo) => {\n        this.setState({ isLoading: true })\n        let title = todo;\n        axios.post('http://localhost:5000/todo', { title })\n            .then(res => {\n                this.setState({\n                    todos: [...this.state.todos, res.data],\n                    isLoading: false\n                })\n            }).catch(err => {\n                console.log(err);\n            });\n    }\n\n\n    render() {\n        let completd = this.state.todos.filter((todo) => todo.completed);\n        return (\n            <div className=\"container\" style={this.state.isLoading ? { opacity: \"0.3\" } : null}>\n\n                <Header timeGetBusy={this.state.timeGetBusy} />\n                <TodoInput addTodo={this.handleAddTodo} timeGetBusy={this.state.timeGetBusy} />\n                {this.state.isLoading ? <p>Bitte Warten</p> : null}\n                <span style={{ color: 'green', fontSize: 12 }}>Todo completd: {completd.length}</span>\n                <ul style={{ padding: 40 }}>\n                    {\n                        this.state.todos.map(todo => (\n                            <TodoItem\n                                key={todo._id}\n                                title={todo.title}\n                                id={todo._id}\n                                completed={todo.completed}\n                                handleChange={this.onChangeCheckBox}\n                                handleDelete={this.onDelete} />\n\n                        ))\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\n\n\n\n\nexport default TodoContainer;","import React from 'react';\nimport TodoContainer from './components/TodoContainer';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoContainer text=\"Mein Text kommt als property\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}